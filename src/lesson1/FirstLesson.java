package lesson1;

import org.w3c.dom.ls.LSOutput;

import java.util.Scanner;

public class FirstLesson {
//    /**/    //    комментарий
    /*многострочный комментарий*/
//    psvm точка входа в приложение
    public static void main(String[] args){

    //Типы данных
//    1.Примитивные типы данных
//    2.Примитивные типы данных
    /*Примитивные типы данных
    * byte - 1 байт- -128 до 127*/
//    для целочисленных типов данных
    byte byteVar;
//    объявление переменной=тип данных+имя переменной
//    значение не присвоено
    byte byteVar1, byteVar2;
        byte byteVar3 = 35;
//    объявление переменной и присваивание ей значения
    byte byteVar4 = 20, byteVar5 = 17;
    byteVar=10;
    byteVar=12;
//    переопределение значения
//    short - 2 байта от -32768 до +32767
//    не популярная переменная, минимум значение\максимум значение
    short shortVar1=300;
    short shortVar2=200;
//    short shortVar3 = shortVar1+shortVar2;
    int shortVar3 = shortVar1+shortVar2;
//    складывание short - Int
//    складывать Int можно
//    int - 4 байта
    int intVar1 = 1000;
    int intVar2 = 2_000_000;
//    разделение десятков для удобства
//    int zeroDivision = intVar1 / 0;
//    деление на 0 - ошибка
//    объявление переменной и действие
//    объявление нескольких переменных чз запятую
//        объявление переменной
//    любые арифм операции будут переводиться на short и int
//    long = 8 байт
//    long longVar = 3000000; запись воспринимается как int,
//    поэтому следует использовать запись вида:
    long longVar = 30000000L;
//    если данные не умещаются в short и int
//    принято в типе long принято ставить в конце букву L, иначе воспринимается как Int
//    следует сразу привыкать читать Exeption ошибки и исправлять
// для дробных данных
//   Float = 4 байта
    float floatVar = 5.7f;
    float floatVar1 = floatVar / 0;
        System.out.println();

//    double - 8 байт
    double doubleVar = -3.12;
    double doubleVar1 = doubleVar / 0;
    System.out.println(doubleVar1);
    //- Infinity
        //Fixme
        //todo
        // todo
//        тип данных char - 2 байта
//        хранит номер символа в таблице Unicode (кодировка UTF-16)
//        от 0 до 65536
//        boolean true/false
//        логический тип данных, принимает только два значения,
//        для конфигураций, или для хранения состояний вкл.выкл
        boolean isActive = true;
        boolean isClosed = false;
//        четкого размера

//        примитивне типы данных закончились

//        приведение типов данных:
//        1.автоматическое приведение типов
        byte someByte = 10;
        int someInt = someByte;
//        2.Явное приведение типов
        someInt = 10;
        someByte = (byte) someInt;
//        операторы
//        операторы присваивания
//        = | += |-= | /= |*= | %=
//        прибавить и присвоить значение/ взять остаток от деления
        int a = 10;
        a += 7;
//        увеличивает на 7 и присваивает значение
//        можем записать a = a + 7;
//        арифметические операторы
//        |+|-|*|/|% - зятие остатка от деления
//        7 % 2 = 1
//        7 / 2 = 3
        a = 12;
        int b = 7;
        int c = a/b;
        System.out.println(c);
        double c1 = a/b;
        System.out.println(c1);
//        привести одну или несколько переменных к double или float, либо а либо b
//        операторы сравнения
//        |>|<|>=|<=|!= (не равно)|== (равенство)
//        результатом работы операторов сравнения будут либо true либо false
//        8 > 10 false
//        18<10 false
//        6!=0 true
//        инкремент (увеличивает на 1)
//        i++ (префиксная форма) ++i (постфиксная форма)
//        i++ сначала возвращается результат, потом увеличивается и наоборот в ++i
//        декремент (уменьшает на 1)
//        i-- (префиксная форма) --i (постфиксная форма)
//        Консольный вывод
        System.out.println("выводимая информация");
//        в Java одинарные ковычки не используются
//        souf
        System.out.printf("Форматированный вывод %s \n", "данных");
//        %f - для вывода чисел с плавающей точкой
//        %d - для вывода целых чисел
//        %s - для вывода строк
//        операция вывода данных таким образом слишком дорогостоящая операция для данных, высоканагруженная операция
//        вывод из консоли - это то что мы хотим получить из консоли
//        Консольный ввод
//        То, что мы хотим, чтобы ввели
//        Scanner in = new Scanner ();
//        alt+enter
        Scanner in = new Scanner (System.in);
        System.out.println("введите число");
        int num = in.nextInt();
        System.out.printf("вы ввели %d \n",num);
//        System.out.println(num);
//                классы с большой буквы всегда
//        Логические операторы
//        применяются к bolean переменным или выражениям
//        && и (и то и то)
//        || или
//        ! Не
//        ^ Исключающее или
//       Дома прочитать десятичные и двоичные системы счисления
//         Тернарный оператор
//        Синтаксис тернарного оператора-
//        переменная (условие) ? выражение 1 : выражение 2
        a = 2;
        b = 3;
        c = a < b ? a + b : a - b;
//        c = (a < b)  ? a + b : a - b;
        System.out.println(c);
// дана переменная типа int
// четное - > /2
//  нечетное - > *2

       int result = a % 2 == 0 ? a / 2 : a *2;
        // дома вспомнить про if \ else
        System.out.println(result);

        a=2;
        int aRes = a++ - ++a + a++ + a++ + a;
        System.out.println(aRes);
        //2 - 4 + 4 + 5 + 6 = 13





// дома вспомнить про if \ else


    }
}





